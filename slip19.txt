

<!DOCTYPE html>
<html>
<head>
	<title>Login Form</title>
	<script>
		function validateForm() {
			var username = document.forms["login"]["username"].value;
			var password = document.forms["login"]["password"].value;

			if (username == "") {
				alert("Username must be filled out");
				return false;
			}

			if (password == "") {
				alert("Password must be filled out");
				return false;
			}

			// add more validation rules as required

			return true;
		}
	</script>
</head>
<body>
	<h1>Login Form</h1>
	<form name="login" onsubmit="return validateForm()">
		<label for="username">Username:</label>
		<input type="text" id="username" name="username"><br><br>
		<label for="password">Password:</label>
		<input type="password" id="password" name="password"><br><br>
		<input type="submit" value="Submit">
	</form>
</body>
</html>



setb

import pandas as pd
df = pd.read_csv('movie_review.csv')

import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
import string

# download the stopwords and lemmatizer
nltk.download('stopwords')
nltk.download('wordnet')

# define the preprocessing function
def preprocess_text(text):
    # remove punctuation and digits
    text = text.translate(str.maketrans('', '', string.punctuation + string.digits))
    # convert text to lowercase
    text = text.lower()
    # tokenize the text
    tokens = word_tokenize(text)
    # remove stopwords
    stop_words = set(stopwords.words('english'))
    tokens = [token for token in tokens if token not in stop_words]
    # lemmatize the tokens
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(token) for token in tokens]
    # join the tokens back into a string
    text = ' '.join(tokens)
    return text

# apply the preprocessing function to the 'review' column of the dataframe
df['review'] = df['review'].apply(preprocess_text)

from textblob import TextBlob

# define a function to calculate the sentiment polarity score
def get_sentiment(text):
    blob = TextBlob(text)
    return blob.sentiment.polarity

# apply the function to the 'review' column of the dataframe
df['sentiment'] = df['review'].apply(get_sentiment)

from wordcloud import WordCloud
import matplotlib.pyplot as plt

# concatenate all the preprocessed reviews into a single string
text = ' '.join(df['review'])

# create the wordcloud
wordcloud = WordCloud(width=800, height=800, background_color='white', min_font_size=10).generate(text)

# plot the wordcloud
plt.figure(figsize=(8, 8), facecolor=None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad=0)
plt.show()


