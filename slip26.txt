Q1.) Create employee table as follows EMP (eno, ename, designation, salary). Write Ajax program to 
select the employees name and print the selected employeeâ€™s details.

html-:

<!DOCTYPE html>
<html>
<head>
	<title>Employee Details</title>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
	<script src="script.js"></script>
</head>
<body>
	<h1>Select an Employee</h1>
	<select id="employee-select">
		<option value="">Select Employee</option>
		<option value="1">John</option>
		<option value="2">Jane</option>
		<option value="3">Bob</option>
	</select>

	<div id="employee-details"></div>
</body>
</html>


javascript-:

$(document).ready(function() {
	$('#employee-select').on('change', function() {
		var eno = $(this).val();
		if(eno) {
			$.ajax({
				url: 'employee-details.php',
				type: 'GET',
				data: {eno: eno},
				dataType: 'json',
				success: function(response) {
					var html = '<h2>Employee Details</h2>';
					html += '<p><strong>Employee Number:</strong> ' + response.eno + '</p>';
					html += '<p><strong>Name:</strong> ' + response.ename + '</p>';
					html += '<p><strong>Designation:</strong> ' + response.designation + '</p>';
					html += '<p><strong>Salary:</strong> ' + response.salary + '</p>';
					$('#employee-details').html(html);
				}
			});
		} else {
			$('#employee-details').html('');
		}
	});
});

setb
import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize, sent_tokenize
from collections import defaultdict

# Input text paragraph
text = "Hello all, Welcome to Python Programming Academy. Python Programming Academy is a nice platform to learn new programming skills. It is difficult to get enrolled in this Academy."

# Preprocessing the text to remove special characters and digits
text = re.sub('[^a-zA-Z]', ' ', text)
text = re.sub(r'\s+', ' ', text)

# Tokenizing the sentences and words
sentences = sent_tokenize(text)
words = word_tokenize(text.lower())

# Removing the stopwords
stop_words = set(stopwords.words('english'))
words = [word for word in words if word not in stop_words]

# Calculating the word frequency distribution
freq_dist = defaultdict(int)
for word in words:
    freq_dist[word] += 1

# Sorting the words in descending order of their frequency
sorted_freq_dist = sorted(freq_dist.items(), key=lambda x: x[1], reverse=True)

# Extracting the top 2 sentences from the text as the summary
summary = ' '.join([sentence for sentence in sentences if sorted_freq_dist[0][0] in sentence or sorted_freq_dist[1][0] in sentence])

# Printing the summary
print(summary)
