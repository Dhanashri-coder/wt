
PHP-:
<?php

// Create the SimpleXMLElement object
$xml = new SimpleXMLElement('<CricketTeam></CricketTeam>');

// Add the first Team element for Australia
$australiaTeam = $xml->addChild('Team');
$australiaTeam->addAttribute('country', 'Australia');
$australiaTeam->addChild('player', 'Steve Smith');
$australiaTeam->addChild('runs', '6058');
$australiaTeam->addChild('wicket', '0');

// Add the second Team element for Australia
$australiaTeam2 = $xml->addChild('Team');
$australiaTeam2->addAttribute('country', 'Australia');
$australiaTeam2->addChild('player', 'David Warner');
$australiaTeam2->addChild('runs', '5343');
$australiaTeam2->addChild('wicket', '0');

// Add the third Team element for India
$indiaTeam = $xml->addChild('Team');
$indiaTeam->addAttribute('country', 'India');
$indiaTeam->addChild('player', 'Virat Kohli');
$indiaTeam->addChild('runs', '7318');
$indiaTeam->addChild('wicket', '4');

// Add the fourth Team element for India
$indiaTeam2 = $xml->addChild('Team');
$indiaTeam2->addAttribute('country', 'India');
$indiaTeam2->addChild('player', 'Rohit Sharma');
$indiaTeam2->addChild('runs', '9115');
$indiaTeam2->addChild('wicket', '8');

// Save the XML file
$xml->asXML('cricket.xml');


To print the details of the Indian team in a tabular format after accepting the course as input, you can use the following PHP script:

PHP-:

<?php

// Load the XML file
$xml = simplexml_load_file('cricket.xml');

// Get the course input from user
$course = $_POST['course'];

// Loop through the Team elements with country=India
echo "<table><tr><th>Player</th><th>Runs</th><th>Wicket</th></tr>";
foreach ($xml->Team as $team) {
  if ($team['country'] == 'India') {
    if ($team->$course) {
      echo "<tr><td>" . $team->player . "</td><td>" . $team->$course . "</td><td>" . $team->wicket . "</td></tr>";
    }
  }
}
echo "</table>";


set A
import pandas as pd
import nltk
from nltk.tokenize import word_tokenize
from nltk.sentiment import SentimentIntensityAnalyzer

# read the dataset
df = pd.read_csv("covid_2021_1.csv")

# drop unnecessary columns
df = df.drop(columns=['author', 'datetime'])

# drop rows with missing values
df = df.dropna()

# define function to tokenize comments in words
def tokenize_comments(comment):
    return word_tokenize(comment.lower())

# tokenize comments in words
df['tokenized_comments'] = df['comment'].apply(tokenize_comments)

# perform sentiment analysis
sid = SentimentIntensityAnalyzer()
df['sentiment'] = df['comment'].apply(lambda x: sid.polarity_scores(x))

# classify comments as positive, negative or neutral based on compound score
df['sentiment'] = df['sentiment'].apply(lambda x: 'positive' if x['compound'] > 0 
                                                      else 'negative' if x['compound'] < 0 
                                                      else 'neutral')

# calculate percentage of positive, negative and neutral comments
sentiment_counts = df['sentiment'].value_counts(normalize=True)
pos_percent = round(sentiment_counts['positive']*100, 2)
neg_percent = round(sentiment_counts['negative']*100, 2)
neu_percent = round(sentiment_counts['neutral']*100, 2)

# print total views, likes, dislikes and comment count
total_views = df['view_count'].sum()
total_likes = df['like_count'].sum()
total_dislikes = df['dislike_count'].sum()
total_comments = df.shape[0]

print("Total Views:", total_views)
print("Total Likes:", total_likes)
print("Total Dislikes:", total_dislikes)
print("Total Comments:", total_comments)

# print percentage of positive, negative and neutral comments
print("Percentage of Positive Comments:", pos_percent)
print("Percentage of Negative Comments:", neg_percent)
print("Percentage of Neutral Comments:", neu_percent)
