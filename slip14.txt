set A

HTML-:

<!DOCTYPE html>
<html>
  <head>
    <title>Teacher Details</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
      $(document).ready(function() {
        $("#teacher-list").change(function() {
          // Get the selected teacher's name from the dropdown list
          const tname = $(this).val();

          // Send an AJAX request to retrieve the teacher's details
          $.ajax({
            url: "teacher.php",
            data: { tname: tname },
            success: function(data) {
              // Display the teacher's details in the result div
              $("#result").html(data);
            }
          });
        });
      });
    </script>
  </head>
  <body>
    <label for="teacher-list">Select a Teacher:</label>
    <select id="teacher-list" name="teacher">
      <option value="">-- Select a Teacher --</option>
      <option value="John">John</option>
      <option value="Jane">Jane</option>
      <option value="Bob">Bob</option>
    </select>
    <div id="result"></div>
  </body>
</html>

PHP-:

<?php
// Create a database connection
<?php
	$cname=$_POST['cname'];
	$con=pg_connect("host=192.168.1.254 dbname=exam user=exam password=exam");

// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}

// Get the selected teacher's name from the AJAX request
$tname = $_GET["tname"];

// Retrieve the selected teacher's details from the TEACHER table
$sql = "SELECT * FROM TEACHER WHERE tname='$tname'";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
  // Generate an HTML table with the teacher's details
  echo "<table>";
  while ($row = $result->fetch_assoc()) {
    echo "<tr><td>Teacher No:</td><td>" . $row["tno"] . "</td></tr>";
    echo "<tr><td>Name:</td><td>" . $row["tname"] . "</td></tr>";
    echo "<tr><td>Qualification:</td><td>" . $row["qualification"] . "</td></tr>";
  }
 ?>
 
 
 set b
 
 import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules

# Create the dataset
dataset = [['Apple', 'Mango', 'Banana'],
           ['Mango', 'Banana', 'Cabbage', 'Carrots'],
           ['Mango', 'Banana', 'Carrots'],
           ['Mango', 'Carrots']]

# Convert categorical values to numeric using one-hot encoding
te = TransactionEncoder()
te_ary = te.fit(dataset).transform(dataset)
df = pd.DataFrame(te_ary, columns=te.columns_)

# Apply Apriori algorithm with minimum support of 0.5
frequent_itemsets = apriori(df, min_support=0.5, use_colnames=True)

# Generate association rules with minimum confidence of 0.7
rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=0.7)

# Print the frequent itemsets and association rules
print("Frequent Itemsets:")
print(frequent_itemsets)
print("\nAssociation Rules:")
print(rules)

