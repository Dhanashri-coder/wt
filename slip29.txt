

html-:

<!DOCTYPE html>
<html>
<head>
	<title>Self-processing Page</title>
</head>
<body>
	<h1>Number Operations</h1>
	<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>">
		<label for="number">Enter a number:</label>
		<input type="number" name="number" id="number" required>
		<br><br>
		<input type="submit" value="Submit">
	</form>
	<?php
		if ($_SERVER["REQUEST_METHOD"] == "POST") {
			$number = $_POST["number"];
			// Fibonacci series
			$fibonacci = "";
			$a = 0;
			$b = 1;
			while ($a <= $number) {
				$fibonacci .= $a . " ";
				$c = $a + $b;
				$a = $b;
				$b = $c;
			}
			echo "<h2>Fibonacci Series:</h2>";
			echo "<p>" . $fibonacci . "</p>";
			// Sum of digits
			$sum = 0;
			while ($number > 0) {
				$sum += $number % 10;
				$number = (int)($number / 10);
			}
			echo "<h2>Sum of Digits:</h2>";
			echo "<p>" . $sum . "</p>";
		}
	?>
</body>
</html>


set b

import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# Reading the dataset
data = pd.read_csv('student_scores.csv')

# Preparing the data
X = data.iloc[:, :-1]
y = data.iloc[:, -1]

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Creating an instance of the logistic regression model
log_reg = LogisticRegression()

# Fitting the model on the training data
log_reg.fit(X_train, y_train)

# Making predictions on the test data
y_pred = log_reg.predict(X_test)

# Evaluating the performance of the model
print(classification_report(y_test, y_pred))


